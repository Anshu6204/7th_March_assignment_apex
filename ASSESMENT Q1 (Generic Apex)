public class genericSObjectGroupingbatch implements Database.Batchable<SObject> {
	public String fieldName;
    public Map<String, List<SObject>> objFieldMap = new Map<String, List<SObject>>();
    //constructor to initialize batch
    public genericSObjectgroupingbatch(String fieldName){
        this.fieldName = fieldName;
    }
    
    public Database.QueryLocator start(Database.BatchableContext dbc){
        //Dynamic query
        String query = 'SELECT ' + fieldName + ', Id FROM ' + getObjectType();
    	
        return Database.getQueryLocator(query);
    }
    public void execute(Database.BatchableContext dbc, List<SObject> scope) {
        for(SObject record : scope) {
            String fieldValue = String.valueOf(record.get(fieldName));
            
            if(!objFieldMap.containsKey(fieldValue)) {
                objFieldMap.put(fieldValue, new List<SObject>());
            }
            objFieldMap.get(fieldValue).add(record);
        }
    }
  	public void finish(Database.BatchableContext bc) {
        System.debug(objFieldMap);
    }
    //Method to get SOject type for the dynamic query
    public String getObjectType(){
        if(objFieldMap.isEmpty()){
            return '';
        }
        return String.valueOf(objFieldMap.values()[0][0].getSObjectType());
    }
}
